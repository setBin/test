<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">




	<!--自动扫描包-->
	<context:component-scan base-package="com.loop.web">
	  <!--除了描控制器不扫描外 其它全部扫描-->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- 1.配置数据库相关参数properties的属性：${url} -->
	<context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true" />
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<!-- c3p0连接池的私有属性 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />
		<!-- 获取连接超时时间 -->
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<!-- 当获取连接失败重试次数 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
	</bean>

	<!-- spring集成mybatis，不再需要mybatis的配置文件 -->
	<!--================== 配置和MyBatis的整合=============== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:spring-mybatis.xml"></property>
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:com/loop/web/mapper/*.xml"></property>
	</bean>

	<!--事务管理器 mybatis的-->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"/>
	</bean>
	<!--事务增强  add   update delete 有异常 就自动回滚   get方法只允许读取-->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*"
					   isolation="REPEATABLE_READ" rollback-for="Exception"/>
			<tx:method name="update*"
					   isolation="REPEATABLE_READ" rollback-for="Exception"/>
			<tx:method name="delete*"
					   isolation="REPEATABLE_READ" rollback-for="Exception"/>
			<tx:method name="get*"
					   isolation="REPEATABLE_READ" read-only="true"/>
			<tx:method name="*"
					   isolation="REPEATABLE_READ" propagation="NOT_SUPPORTED"/>
		</tx:attributes>
	</tx:advice>

	<!--切入点  扫描execution(* com.shiro.test.mvc.service..*(..))  切入事务-->
	<!--事物切面-->
	<aop:config>
		<aop:pointcut
				expression="execution(* com.loop.web.service..*(..))" id="point"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="point"/>
	</aop:config>
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.loop.web.dao"></property>
	</bean>
	




     <!--配置MultipartReaolver  文件上传的一些相关配置-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxInMemorySize" value="10240000"></property>
    </bean>



    <context:property-placeholder location="classpath:email.properties" ignore-unresolvable="true"/>
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <!-- 163邮箱,smtp.163.com -->
        <!-- admin@163.com 用户名:admin 密码:xxx -->
        <!-- smtp邮件发送协议 -->
        <!-- pop3收邮件协议 -->
        <property name="host" value="${email.host}" />
        <property name="username" value="${email.username}" />
        <property name="password" value="${email.password}" />
        <property name="javaMailProperties">
            <props>
                <!-- 必须进行授权认证，它的目的就是阻止他人任意乱发邮件 -->
                <prop key="mail.smtp.auth">true</prop>
                <!-- SMTP加密方式:连接到一个TLS保护连接 -->
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>
    </bean>
	<!--下面是shiro的一些配置-->

	<!--记住我的cookie-->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMyShiro"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="2592000"/>
	</bean>
	<!---->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie"/>
		<!--16,24,32的base64-->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('MTIzNDU2Nzg5MGFiY2RlZg==')}"/>
	</bean>
	<!--自定义realm-->
	<bean id="myShiroRealm" class="com.loop.web.fifter.MyShiroRealm"/>
	<!--缓存管理器-->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
	<!--将realm引入securityManager-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--<property name="realm" ref="iniRealm"/>-->
		<property name="realm" ref="myShiroRealm"/>
		<property name="cacheManager" ref="cacheManager"/>
		<property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	<bean id="shiroFilter" class="com.loop.web.fifter.MyShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/signin"/>
		<property name="successUrl" value="/index"/>
		<property name="unauthorizedUrl" value="/error"/>
		<property name="filterChainDefinitions">
			<!--
           配置哪些页面需要受保护.
           以及访问这些页面需要的权限.
           1). anon 可以被匿名访问
           2). authc 必须认证(即登录)后才可能访问的页面.
           3). logout 登出.
           4). roles 角色过滤器
           /admin?=authc      表示可以请求以admin开头的字符串，如xxx/adminfefe，但无法匹配多个，即xxx/admindf/admin是不行的
			/admin*=authc      表示可以匹配零个或者多个字符，如/admin，/admin1，/admin123，但是不能匹配/admin/abc这种
			/admin/**=authc      表示可以匹配零个或者多个路径，如/admin，/admin/ad/adfdf等
       -->
			<value>
				/signin=anon
				/loginout=anon
				/signup=anon
				/**/**=anon

			</value>
		</property>
		<property name="filters">
			<map>
				<entry key="roles">
					<bean class="com.loop.web.fifter.MyShiroFilter"/>
				</entry>
			</map>
		</property>
	</bean>

</beans>
